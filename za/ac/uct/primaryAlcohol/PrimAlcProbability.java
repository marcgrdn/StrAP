package za.ac.uct.primaryAlcohol;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;

/**
 * 
 * @author marc
 *
 */
public class PrimAlcProbability {
	
	public void init(String infile) throws Exception {
		calcConfFrequencies(infile);
	}
	
	/**
	 * Method called to kick off the bin frequency calculation.<br />
	 * Calls other methods to manage entire process.
	 * @param infile list of frames and corresponding angles as generated by VMD (tab value separators replaced with space value separators)
	 * @throws Exception
	 */
	private void calcConfFrequencies(String infile) throws Exception {
		String line;
		String outfile = infile+"_primAlcProb.dat";
		ArrayList<PrimAlcBin> aList = new ArrayList<PrimAlcBin>();
		aList = initArrayList(aList);
		
		BufferedWriter bw = new BufferedWriter(new FileWriter(outfile));
		BufferedReader br = new BufferedReader(new FileReader(infile));
		
		double total = 0;	// total number of angle measurements (used for probability calculations)
		
		while((line=br.readLine()) != null) {
			// ignore comment lines starting with hash
			if (line.startsWith("#"))
				continue;
			
			// ignore blank lines
			if (line.trim().length() == 0)
				continue;
			
			// increment total after eliminating comments and blank lines
			total++;
			
			String[] tokens = line.split(" ");
			
			int roundAngle = Math.round(Float.parseFloat(tokens[1]));
			
			// if the rounded angle matches angles for any of the bins then increment the bin's frequency by 1
			for(int i=0; i<aList.size(); i++) {
				if(roundAngle==aList.get(i).getAngle())
					aList.get(i).incFreq();
			}
		}
		
		/*
		 *  Calculate probabilities (frequency of occurrence / total occurrences)
		 *  then write angles and probabilities to output file.
		 *  
		 *  Produces scientific notation for longer numbers but gnuplot handles it fine
		 */
		for(int i=0; i<aList.size(); i++) {
			double prob = (double) aList.get(i).getFrequency()/total;
			bw.write(aList.get(i).getAngle()+" "+prob);
			bw.newLine();
			bw.flush();
		}
		bw.close();
	}
	
	/**
	 * Create the initial arrayList
	 * @param aList
	 * @return
	 */
	private ArrayList<PrimAlcBin> initArrayList(ArrayList<PrimAlcBin> aList) {
		for(int i=-180; i<=180; i++) {
			aList.add(new PrimAlcBin(i));
		}
		return aList;
	}
}
